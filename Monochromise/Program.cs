using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Drawing;
using System.IO;

//
//  Copyright (C) 2022 Pharap (@Pharap)
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

namespace Monochromise
{
    class Program
    {
        static void Main(string[] arguments)
        {
            foreach (var argument in arguments)
                Process(argument);
        }

        /// <summary>
        /// Generates a new file path from the old one.
        /// </summary>
        /// <param name="path">The old file path.</param>
        /// <returns>The new file path.</returns>
        public static string GenerateNewPath(string path)
        {
            var directory = Path.GetDirectoryName(path);
            var fileName = Path.GetFileNameWithoutExtension(path);
            var extension = Path.GetExtension(path);

            // Create a new file name by appending 'BW' to the old one
            return Path.ChangeExtension(Path.Combine(directory, fileName + "BW"), extension);
        }

        /// <summary>
        /// Loads the bitmap at the given file path
        /// and saves a monochromised copy to a new path.
        /// The new path is generated by means of GenerateNewPath.
        /// </summary>
        /// <param name="path">The path to the target file.</param>
        public static void Process(string path)
        {
            Process(path, GenerateNewPath(path));
        }

        /// <summary>
        /// Loads the bitmap at the given file path
        /// and saves a monochromised copy to the specified new path.
        /// </summary>
        /// <param name="path">The path to the target file.</param>
        /// <param name="newPath">The path at which the new file is to be saved.</param>
        public static void Process(string path, string newPath)
        {
            using (var bitmap = (Bitmap)Bitmap.FromFile(path))
                using (var result = Process(bitmap))
                    result.Save(newPath);
        }

        /// <summary>
        /// Returns a newly created monochromised copy of the specified image.
        /// </summary>
        /// <param name="source">The image to monochromise.</param>
        /// <returns>A monochromised copy of the old file.</returns>
        public static Bitmap Process(Bitmap source)
        {
            var result = new Bitmap(source.Width, source.Height);

            for (int x = 0; x < source.Width; ++x)
                for (int y = 0; y < source.Height; ++y)
                {
                    var sourceColour = source.GetPixel(x, y);
                    var sum = (sourceColour.R + sourceColour.G + sourceColour.B);
                    var average = (sum / 3);
                    var resultColour = (average > 127) ? Color.White : Color.Black;

                    result.SetPixel(x, y, resultColour);
                }

            return result;
        }
    }
}
